import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as l,b as n,d as a,e as t,f as i}from"./app-d75e961b.js";const u={},r=n("blockquote",null,[n("p",null,"前言：本文摘自我的个人cnblog博客（原文发表于2017年），并在原来的基础上进行修改，主要阐述通过一个属性即可开启浏览器中网页文件夹上传，更准确的说是input[type=file]的一个属性。本文只是做一个简单的知识点记录。")],-1),k=n("h3",{id:"背景",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#背景","aria-hidden":"true"},"#"),a(" 背景")],-1),d=n("p",null,"当时公司所在项目，有一个文件上传小需求，要求上传文件要可以同时选择文件及文件夹，文件可以多选。如果选择文件夹即默认将文件夹内的文件全部上传。当时想到的唯一解决方案就是便利所选文件夹内的文件，然后进行上传，但始终觉得此方案不是太好，冥冥之中感觉应该是有现成的解决方案的。借助于搜索引擎，当时并未发现其他较好的解决方案，此时，我却记得某些网盘有此功能，遂研究百度网盘文件上传功能。",-1),m={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLInputElement/webkitdirectory",target:"_blank",rel:"noopener noreferrer"},h={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLInputElement/webkitdirectory",target:"_blank",rel:"noopener noreferrer"},v=i(`<h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><p>下面的示例将展示一个或多个选择文件夹，触发change事件后，将选择的文件的文件名显示在列表中进行展示。(摘自MDN)</p><h4 id="html" tabindex="-1"><a class="header-anchor" href="#html" aria-hidden="true">#</a> HTML</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>filepicker<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fileList<span class="token punctuation">&quot;</span></span> <span class="token attr-name">webkitdirectory</span> <span class="token attr-name">multiple</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>listing<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript" aria-hidden="true">#</a> Javascript</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;filepicker&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;change&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> output <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;listing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> files <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>files<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> item <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    output<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h4><p>对于目前要实现上传文件夹功能，此属性可作为一个选择，但要追求兼容各浏览器，恐怕要曲线救国，采用其他方式和了。其实，我们都可以参考百度网盘网页版做法，对支持此属性的浏览器则显示上传文件夹选项，如果不支持此属性则不显示上传文件夹选项，从而做到一定的兼容。</p>`,8);function f(b,g){const s=p("ExternalLinkIcon");return o(),c("div",null,[r,k,d,l(" more "),n("p",null,[a("进入百度网盘网页版，发现百度网盘个人主页上还真有上传文件夹的按钮，点击此按钮弹出的资源管理器中（windowsOS)，就可以直接选择文件夹。故推断此功能应该不是js实现的，于是就在html标签属性中下功夫，果不其然，就在百度网盘上传的input type=file 的标签上发现了一个未曾见过的属性“"),n("a",m,[a("webkitdirectory"),t(s)]),a("”，进入MDN一查，果然就是这个属性开启了input的文件夹上传功能。但是，此属性还处在实验非标准 non-standard中，兼容性是最大的问题。2017年当时使用是实际测试仅支持chrome浏览器，而到目前为止，MDN给出的兼容性还算不错，支持chrome、edge、firefox较新版本浏览器。具体信息可以点这里查看："),n("a",h,[a("HTMLInputElement.webkitdirectory"),t(s)]),a("。")]),v])}const y=e(u,[["render",f],["__file","post-title-with-whitespace.html.vue"]]);export{y as default};
