import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as l,a as i,b as n,d as s,e,f as t}from"./app-fe5c3a7f.js";const r={},u=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),d=n("p",null,"在前端中处理文件时会经常遇到File、Blob、ArrayBuffer以及相关的处理方法或方式如FileReader、FormData等等这些名词，对于这些常见而又不常见的名词，我相信大多数人对它们都有一种熟悉的陌生人的感觉。究其原因，相关的东西接触的不够多，且每次都网上随手拈来，不求甚解。今天，我们就稍微仔细一点，去做一个探究，弄清他们是谁，能做什么，又有什么区别，",-1),k=t('<p>争取下次再见既是“老朋友”。如果，你想更深入的了解相关知识点，可以参阅w3c和MDN的解释，文后会附上相关的参考链接供参考。</p><h2 id="内容" tabindex="-1"><a class="header-anchor" href="#内容" aria-hidden="true">#</a> 内容</h2><h3 id="file" tabindex="-1"><a class="header-anchor" href="#file" aria-hidden="true">#</a> File</h3><h4 id="定义-概念" tabindex="-1"><a class="header-anchor" href="#定义-概念" aria-hidden="true">#</a> 定义/概念</h4><p>File即我们通常所说的文件，我们硬盘里存储的音视频、文档等等都是文件。我们通常使用<code>&lt;input type=&quot;file&quot;&gt;</code>来选取并读取本地计算机中的文件，返回一个Filelist对象，此对象为一个类数组可迭代对象。File对象是特殊类型的Blob,所以顺便也继承了Blob特有的方法和属性,同时又有自己独特的属性和方法。</p>',5),b=n("strong",null,[n("code",null,"File")],-1),m=n("code",null,"File",-1),v={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"<input>",-1),h={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/FileList",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"FileList",-1),_={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransfer",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"DataTransfer",-1),g={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"HTMLCanvasElement",-1),A=n("code",null,"mozGetAsFile",-1),q=n("h4",{id:"用法-示例",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#用法-示例","aria-hidden":"true"},"#"),s(" 用法/示例")],-1),F=n("p",null,"File常用的属性有：",-1),j=n("p",null,[n("code",null,"File.name"),s(" 只读,返回当前File 对象所引用文件的名称。")],-1),x=n("p",null,[n("code",null,"File.size"),s(" 只读,返回当前File 对象文件的大小。")],-1),z=n("p",null,[n("code",null,"File.type"),s(" 只读,返回文件的多用途互联网邮件扩展类型（MIME Type）")],-1),M={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/File",target:"_blank",rel:"noopener noreferrer"},I=t(`<p>FileList: <code>&lt;input type=&quot;file&quot;&gt;</code> 元素有一个files属性,用来存储用户所选择的文件,当用户点击选择文件按钮之后，便可以获取到选择的文件组成的FileList对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fileList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;file&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>files<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fileList<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://qncdn.yunishare.cn/fileList.png@water" alt="结果" tabindex="0" loading="lazy"><figcaption>结果</figcaption></figure><p>在这几个当中，File应该是我们使用的频率最高的一个，应该也是最熟悉的一个，所以过多的内容这里就不一一示例。这里引入一个很久之前遇到的一个相关的IE兼容性问题。</p><p><em>input[type=file]这个文件上传原生按钮不够美观，通常都是采取隐藏此原生的按钮，使用另外一个自定义的按钮，然后，通过点击此按钮间接触发隐藏的原生按钮，从而实现这一功能。但是，由于IE安全限制，我们间接通过clik()触发的，在IE9某些版本就会报<code>SCRIPT: 拒绝访问</code>的错误。解决这个问题，要主动触发上传按钮，此时借助label的for属性，绑定到对应的input上即可解决此问题。</em></p><h3 id="blob" tabindex="-1"><a class="header-anchor" href="#blob" aria-hidden="true">#</a> Blob</h3><h4 id="定义-概念-1" tabindex="-1"><a class="header-anchor" href="#定义-概念-1" aria-hidden="true">#</a> 定义/概念</h4><p>Blob是<code>Binary Large Object</code>的缩写，表示二进制大对象，它并不是前端的所特有对象，而是计算机界的通用术语，在一些数据库中，例如，MYSQL中的BLOB类型就表示二进制数据的容器。MDN上对其的定义是：<code>Blob</code> 对象表示一个不可变、原始数据的类文件对象。可以通俗的说，Blob就是一只读的二进制对象。从File的介绍我们已知File继承自Blob，有许多相同的方法和属性，因此可以像操作File对象一样操作Blob对象。</p><h4 id="用法-示例-1" tabindex="-1"><a class="header-anchor" href="#用法-示例-1" aria-hidden="true">#</a> 用法/示例</h4><p>Blob主要包含两个属性</p>`,10),D=n("li",null,[n("code",null,"Blob.size"),s("：只读，对象中所包含数据的大小（字节）")],-1),T=n("code",null,"Blob.type",-1),N=n("code",null,"Blob",-1),C={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types",target:"_blank",rel:"noopener noreferrer"},P=t(`<p>创建一个Blob对象，需要调用Blob构造函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
* <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Array<span class="token punctuation">}</span></span> <span class="token parameter">array</span> 一个由ArrayBuffer, ArrayBufferView, Blob, DOMString 等对象构成的数组
* <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> <span class="token parameter">options</span> 一个可选的BlobPropertyBag字典
*/</span>
<span class="token keyword">function</span> <span class="token function">Blob</span><span class="token punctuation">(</span> <span class="token parameter">array<span class="token punctuation">,</span> options</span> <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><em>array</em> 是一个由<code>ArrayBuffer</code>, <code>ArrayBufferView</code>, <code>Blob</code>, <code>DOMString</code> 等对象构成的 <code>Array</code> ，或者其他类似对象的混合体，它将会被放进 <code>Blob</code>。<code>DOMStrings</code>会被编码为UTF-8。</p><p><em>options</em> 是一个可选的<code>BlobPropertyBag</code>字典，它可能会指定如下两个属性：</p><ul><li><code>type</code>，默认值为 <code>&quot;&quot;</code>，它代表了将会被放入到blob中的数组内容的MIME类型。</li><li><code>endings</code>，默认值为<code>&quot;transparent&quot;</code>，用于指定包含行结束符<code>\\n</code>的字符串如何被写入。 它是以下两个值中的一个： <code>&quot;native&quot;</code>，代表行结束符会被更改为适合宿主操作系统文件系统的换行符，或者 <code>&quot;transparent&quot;</code>，代表会保持blob中保存的结束符不变</li></ul></blockquote><p>使用示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> data1 <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> data2 <span class="token operator">=</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> data3 <span class="token operator">=</span> <span class="token string">&quot;&lt;div style=&#39;color:red;&#39;&gt;This is a blob&lt;/div&gt;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> data4 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;abc&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 创建blob对象</span>
<span class="token keyword">const</span> blob1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>data1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> blob2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>data1<span class="token punctuation">,</span> data2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> blob3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>data3<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">type</span> <span class="token operator">:</span> <span class="token string">&#39;text/html&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> blob4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data4<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> blob5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>data4<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> blob6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>data3<span class="token punctuation">,</span> data4<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>blob1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出：Blob {size: 1, type: &quot;&quot;}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>blob2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出：Blob {size: 2, type: &quot;&quot;}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>blob3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出：Blob {size: 44, type: &quot;text/html&quot;}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>blob4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出：Blob {size: 14, type: &quot;&quot;}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>blob5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出：Blob {size: 15, type: &quot;&quot;}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>blob6<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出：Blob {size: 59, type: &quot;&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上blob5的size值打印为什么是15呢？原因是，当使用普通对象创建Blob对象时，相当于调用了普通对象的<code>toString()</code>方法得到字符串数据，然后再创建Blob对象。所以，blob5保存的数据是<code>&quot;[object Object]&quot;</code>，是15个字节(不包含最外层的引号)。</p><p>Blob目前有四个方法：</p><p><code>Blob.slice([start[, end[, contentType]]])</code>：返回一个新的 <code>Blob</code> 对象，包含了源 <code>Blob</code> 对象中指定范围内的数据。（由于File继承自Blob，可用此方法分割本地文件，实现分片上传）</p><p><code>Blob.stream()</code>：返回一个能读取blob内容的 <code>ReadableStream</code>。</p><p><code>Blob.text()</code>：返回一个promise且包含blob所有内容的UTF-8格式的 <code>USVString</code>。</p><p><code>Blob.arrayBuffer()</code>：返回一个promise且包含blob所有内容的二进制格式的 <code>ArrayBuffer</code></p><h3 id="arraybuffer" tabindex="-1"><a class="header-anchor" href="#arraybuffer" aria-hidden="true">#</a> ArrayBuffer</h3><h4 id="定义-概念-2" tabindex="-1"><a class="header-anchor" href="#定义-概念-2" aria-hidden="true">#</a> 定义/概念</h4><p>你从XHR、File API、Canvas等等各种地方，读取了一大串字节流，如果用JS里的Array去存，又浪费，又低效。 于是为了配合这些新的API增强JS的二进制处理能力，就有了ArrayBuffer。</p>`,14),S=n("code",null,"ArrayBuffer",-1),L={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"TypedArray",-1),O=n("code",null,"DataView",-1),V=n("code",null,"TypedArray",-1),W=n("code",null,"ArrayBuffer",-1),R=n("code",null,"View",-1),J={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"ArrayBuffer",-1),U=n("code",null,"DataView",-1),G=t(`<blockquote><p>MDN将**<code>ArrayBuffer</code>** 对象定义为用来表示通用的、固定长度的原始二进制数据缓冲区。它是一个字节数组，通常在其他语言中称为“byte array”。</p></blockquote><h4 id="用法示例" tabindex="-1"><a class="header-anchor" href="#用法示例" aria-hidden="true">#</a> 用法示例</h4><p>由于<code>ArrayBuffer</code>不能直接进行操作，故需要借助<code>TypedArray</code>或者<code>DataView</code>来进行读写。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 生成一个可以16个字节的连续内存，每个字节的默认值是0</span>
<span class="token keyword">const</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// TypedArray 使用标准数组语法来获取和设置属性值</span>
<span class="token keyword">var</span> int16 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Int16Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
int16<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>int16<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>

<span class="token keyword">const</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 建立Uint8Array视图</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Int32Array</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 建立Int32Array视图</span>
a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment">// 由于两个视图是对应的是同一段内存，所以其中一个视图更改了内存，会影响到另一个视图</span>
a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h2><h3 id="区别-联系" tabindex="-1"><a class="header-anchor" href="#区别-联系" aria-hidden="true">#</a> 区别/联系</h3><h5 id="file和blob" tabindex="-1"><a class="header-anchor" href="#file和blob" aria-hidden="true">#</a> File和Blob</h5><ul><li><p>相同点： File和Blob都可以用来表示类文件对象，处理文件；</p></li><li><p>FIle: File可以看作一个承载文件的桥梁，将DOM接口和文件联系起来，通过File这个桥梁，获取计算及内的文件，从而对才能对文件做进一步处理。</p></li><li><p>Blob：File继承自Blob，他们之间很方便进行转换，Blob是File都原型对象。</p></li><li><p>联系：File继承自Blob，同时又有自己独特的属性和方法。从下面的打印可以看出，其实Blob对象就是File的原型对象，自然就拥有了Blob对象的方法和属性。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myfiles<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fileDOM <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#myfiles&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">fileChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> files <span class="token operator">=</span> fileDOM<span class="token punctuation">.</span>files<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// 输出File</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// 输出Blob</span>
<span class="token punctuation">}</span>
fileDOM<span class="token punctuation">.</span>onchange <span class="token operator">=</span> fileChange<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h5 id="blob与arraybuffer" tabindex="-1"><a class="header-anchor" href="#blob与arraybuffer" aria-hidden="true">#</a> Blob与ArrayBuffer</h5><ul><li><p>相同点： <code>Blob</code>和<code>ArrayBuffer</code>都是二进制的容器。</p></li><li><p>ArrayBuffer：<code>ArrayBuffer</code>更底层，是一段纯粹的内存上的二进制数据，我们可以对其任何一个字节进行单独的修改，也可以根据我们的需要以我们指定的形式读取指定范围的数据。</p></li><li><p>Blob：<code>Blob</code>就是将二进制数据做了一个封装，我们拿到的就是一个整体，可以看到它的整体属性大小、类型；可以对其分割，但看不到它内部的细节</p></li><li><p>联系：<code>Blob</code>可以接受一个<code>ArrayBuffer</code>作为参数生成一个<code>Blob</code>对象，此行为就相当于对<code>ArrayBuffer</code>数据做一个封装。</p></li><li><p>应用上的区别：由于<code>ArrayBuffer</code>和<code>Blob</code>的特性，<code>Blob</code>作为一个整体文件，适合用于文件传输；而只有需要关注细节（比如要修改某一段数据时），此时使用<code>ArrayBuffer</code>比较好。</p></li></ul><p>从以上我们的介绍以及联系，我们可以得出如下的转换函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
** file转blob
* <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>FileList<span class="token punctuation">}</span></span> <span class="token parameter">files</span> fileList对象
* <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">type</span> MIME类型
*/</span>
<span class="token keyword">function</span> <span class="token function">fileToBlob</span><span class="token punctuation">(</span>files<span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span>files<span class="token punctuation">,</span> <span class="token punctuation">{</span>type<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
* blob转arrayBuffer，file转arrayBuffer同理。
* file转arrayBuffer也可通过FileReader,能控制更多交互细节，在此暂不介绍
**
* <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Blob<span class="token punctuation">}</span></span> <span class="token parameter">blob</span> blob对象
* <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Promise<span class="token punctuation">}</span></span> Promise对象
*/</span>
<span class="token keyword">function</span> <span class="token function">blobToArrayBuffer</span><span class="token punctuation">(</span><span class="token parameter">blob</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> rejejct</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		blob<span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">buffer</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token function">resolve</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token function">rejejct</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>弄清了他们之间的关系，在以后的工作学习中，才能刚好的去使用这些对象，让其用在最适用的地方。而不是每次都一头雾水，熟悉并陌生着。对于和他们相关的FileReader、Base64、FormData，后续会更新相关内容，将其进行联系起来，更好的理解他们。</p><h3 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h3>`,15),Q={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/File",target:"_blank",rel:"noopener noreferrer"},X={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",target:"_blank",rel:"noopener noreferrer"},K={href:"https://www.psvmc.cn/article/2019-09-17-blob-buffer-file.html",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://juejin.im/post/59e35d0e6fb9a045030f1f35",target:"_blank",rel:"noopener noreferrer"};function $(nn,sn){const a=p("ExternalLinkIcon");return c(),l("div",null,[u,d,i(" more "),k,n("blockquote",null,[n("p",null,[s("MDN定义：文件（"),b,s("）接口提供有关文件的信息，并允许网页中的 JavaScript 访问其内容。通常情况下， "),m,s(" 对象是来自用户在一个 "),n("a",v,[f,e(a)]),s(" 元素上选择文件后返回的 "),n("a",h,[y,e(a)]),s(" 对象,也可以是来自由拖放操作生成的 "),n("a",_,[B,e(a)]),s(" 对象，或者来自 "),n("a",g,[w,e(a)]),s(" 上的 "),A,s("() API。")])]),q,F,j,x,z,n("p",null,[s("更多属性及方法信息可参考"),n("a",M,[s("MDN"),e(a)]),s(",这里就不再详细赘述。")]),I,n("ul",null,[D,n("li",null,[T,s("：只读，一个字符串，表明该 "),N,s(" 对象所包含数据的 MIME 类型。如果类型未知，则该值为空字符串。（"),n("a",C,[s("MIME类型参考"),e(a)]),s("）")])]),P,n("p",null,[S,s("简单说就是一片内存，表示原始二进制数据缓冲区。但不能直接操作它，而是要通过"),n("a",L,[s("类型数组对象"),e(a)]),E,s("或 "),O,s(" （数据视图）对象来操作它，它们会将缓冲区中的数据表示为特定的格式，并通过这些格式来读写缓冲区的内容。"),V,s("给"),W,s("提供了一个“"),R,s("”，对它们进行下标读写。也可以使用"),n("a",J,[s("DataView"),e(a)]),s("来读写"),H,s("，"),U,s("能更自由的选择字节序，不用考虑不同平台的字节序问题。")]),G,n("ul",null,[n("li",null,[n("a",Q,[s("MDN Web API 接口参考 - File"),e(a)])]),n("li",null,[n("a",X,[s("MDN Web API 接口参考 - Blob"),e(a)])]),n("li",null,[n("a",Y,[s("JavaScript 标准内置对象 - ArrayBuffer"),e(a)])]),n("li",null,[n("a",K,[s("Blob、ArrayBuffer、File、FileReader和FormData的区别"),e(a)])]),n("li",null,[n("a",Z,[s("细说Web API中的Blob"),e(a)])])])])}const tn=o(r,[["render",$],["__file","The-connection-and-diffrent-of-File-Blob-ArrayBuffer.html.vue"]]);export{tn as default};
