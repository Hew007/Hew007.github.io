import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as i,b as n,d as s,e as l,f as a}from"./app-8be8ff26.js";const u={},r=n("h1",{id:"使用-import-动态导入",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用-import-动态导入","aria-hidden":"true"},"#"),s(" 使用 Import 动态导入")],-1),d=n("p",null,"我们在使用 import 导入时，绝大部分都是使用的静态的 import 语句，静态的 import 导入会使所有被导入的模块，在加载时就被编译。但是，在有些使用场景中，我们可能希望根据某个条件来进行动态的导入模块。此时就可以使用 import 动态导入代替静态导入。",-1),k=a(`<h3 id="静态导入" tabindex="-1"><a class="header-anchor" href="#静态导入" aria-hidden="true">#</a> 静态导入</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// import 导入示例</span>
<span class="token keyword">import</span> defaultExport <span class="token keyword">from</span> <span class="token string">&quot;module-name&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> name <span class="token keyword">from</span> <span class="token string">&quot;module-name&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token keyword">export</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;module-name&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token keyword">export</span> <span class="token keyword">as</span> alias <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;module-name&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> export1 <span class="token punctuation">,</span> export2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;module-name&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> foo <span class="token punctuation">,</span> bar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;module-name/path/to/specific/un-exported/file&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> export1 <span class="token punctuation">,</span> export2 <span class="token keyword">as</span> alias2 <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;module-name&quot;</span><span class="token punctuation">;</span>
<span class="token operator">...</span><span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h2><ul><li>当静态导入的模块比较明显的阻碍了页面代码加载速度或者占用大量系统资源影响了代码运行速度，并且该模块被使用的可能性很低。</li><li>当被导入的模块，在加载时并不存在，需要异步获取时。</li><li>当导入模块的说明符，需要动态构建。</li><li>当被导入的模块有副作用（这里说的副作用，可以理解为模块中会直接运行的代码），这些副作用只有在触发了某些条件才被需要时。（原则上来说，模块不能有副作用，但是很多时候，你无法控制你所依赖的模块的内容）</li></ul>`,4),m={href:"https://wiki.developer.mozilla.org/en-US/docs/Glossary/Tree_shaking",target:"_blank",rel:"noopener noreferrer"},v=a(`<h2 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例" aria-hidden="true">#</a> 使用示例</h2><p>动态 import 导入可以像调用函数一样来动态的导入模块。如下这种方式调用，将返回一个 promise。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用promise</span>
<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./my-module.js&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Do something with the module.</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 也可以使用await</span>
<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> module <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./my-module.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意，当使用动态 import 导入默认导出时，工作原理略有不同。需要从返回的对象中解构并重命名“default”键。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>somethingIsTrue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token operator">:</span> myDefault<span class="token punctuation">,</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;/modules/my-module.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="兼容性" tabindex="-1"><a class="header-anchor" href="#兼容性" aria-hidden="true">#</a> 兼容性</h2><p>除IE，绝大多数较新版本主流浏览器都支持动态导入 <img src="https://cdn.nlark.com/yuque/0/2021/png/2400472/1614424582599-d71afb4f-1fee-4f8f-8a5d-f5c55f955db1.png#align=left&amp;display=inline&amp;height=363&amp;margin=[object Object]&amp;name=image.png&amp;originHeight=726&amp;originWidth=1621&amp;size=134567&amp;status=done&amp;style=none&amp;width=810.5" alt="image.png" loading="lazy"></p>`,7);function h(b,g){const t=p("ExternalLinkIcon");return o(),c("div",null,[r,d,i(" more "),k,n("blockquote",null,[n("p",null,[s("注意：请不要滥用动态导入（只有在必要情况下采用）。静态框架能更好的初始化依赖，而且更有利于静态分析工具和"),n("a",m,[s("tree shaking"),l(t)]),s("发挥作用")])]),v])}const w=e(u,[["render",h],["__file","dynamic-import-introduce.html.vue"]]);export{w as default};
