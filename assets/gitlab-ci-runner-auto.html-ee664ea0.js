const e=JSON.parse('{"key":"v-51e4c71d","path":"/posts/tech-article/gitlab-ci-runner-auto.html","title":"利用gitlab配合gitlab-runner 配置前端自动化","lang":"zh-CN","frontmatter":{"title":"利用gitlab配合gitlab-runner 配置前端自动化","date":"2020-09-13T20:17:32.000Z","category":["运维","技术"],"tag":["gitlab","gitlab-CI","gitlab-runner","前端自动化","CI,CD"],"description":"前言 自动化是devOps中重要的一个环节，借助于自动化构建、测试和发布等一些列动作，可以解放开发人员的双手，提高工作效率。这也是我们常说的持续集成（CI)，持续部署(CD)中比较重要的部分。自动化可以帮助我们减少人为的错误，而自动化一旦正确配置，就能永远正确的执行下去。自动化减少我们重复性的劳动从而使开发人员的双手解放出来，去做更多有意义的事情，提高人员能效。开发中自动生成一些代码？自动去区分环境启动？自动打包？自动部署？自动发布？自动报警... 等等，以上这些都可以归到自动化的范畴。","head":[["meta",{"property":"og:url","content":"https://blog.yunishare.cn/posts/tech-article/gitlab-ci-runner-auto.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"利用gitlab配合gitlab-runner 配置前端自动化"}],["meta",{"property":"og:description","content":"前言 自动化是devOps中重要的一个环节，借助于自动化构建、测试和发布等一些列动作，可以解放开发人员的双手，提高工作效率。这也是我们常说的持续集成（CI)，持续部署(CD)中比较重要的部分。自动化可以帮助我们减少人为的错误，而自动化一旦正确配置，就能永远正确的执行下去。自动化减少我们重复性的劳动从而使开发人员的双手解放出来，去做更多有意义的事情，提高人员能效。开发中自动生成一些代码？自动去区分环境启动？自动打包？自动部署？自动发布？自动报警... 等等，以上这些都可以归到自动化的范畴。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-05T13:23:09.000Z"}],["meta",{"property":"article:author","content":"Hew.iShare"}],["meta",{"property":"article:tag","content":"gitlab"}],["meta",{"property":"article:tag","content":"gitlab-CI"}],["meta",{"property":"article:tag","content":"gitlab-runner"}],["meta",{"property":"article:tag","content":"前端自动化"}],["meta",{"property":"article:tag","content":"CI,CD"}],["meta",{"property":"article:published_time","content":"2020-09-13T20:17:32.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-05T13:23:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"利用gitlab配合gitlab-runner 配置前端自动化\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-09-13T20:17:32.000Z\\",\\"dateModified\\":\\"2023-04-05T13:23:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hew.iShare\\",\\"url\\":\\"https://blog.yunishare.cn/blog\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"准备","slug":"准备","link":"#准备","children":[]},{"level":2,"title":"配置环境和服务","slug":"配置环境和服务","link":"#配置环境和服务","children":[{"level":3,"title":"docker安装","slug":"docker安装","link":"#docker安装","children":[]},{"level":3,"title":"docker-compose安装","slug":"docker-compose安装","link":"#docker-compose安装","children":[]},{"level":3,"title":"gitlab及gitlab-runner搭建和配置","slug":"gitlab及gitlab-runner搭建和配置","link":"#gitlab及gitlab-runner搭建和配置","children":[]}]},{"level":2,"title":"创建项目","slug":"创建项目","link":"#创建项目","children":[{"level":3,"title":"创建前端项目","slug":"创建前端项目","link":"#创建前端项目","children":[]}]},{"level":2,"title":"配置项目CI/CD","slug":"配置项目ci-cd","link":"#配置项目ci-cd","children":[{"level":3,"title":"gitlab-runner配置","slug":"gitlab-runner配置","link":"#gitlab-runner配置","children":[]},{"level":3,"title":"","slug":"","link":"#","children":[]},{"level":3,"title":"流水线gitlab-ci.yml配置","slug":"流水线gitlab-ci-yml配置","link":"#流水线gitlab-ci-yml配置","children":[]}]}],"git":{"createdTime":1680700989000,"updatedTime":1680700989000,"contributors":[{"name":"Hew","email":"hewei_hn@foxmail.com","commits":1}]},"readingTime":{"minutes":15.16,"words":4547},"filePathRelative":"posts/tech-article/gitlab-ci-runner-auto.md","localizedDate":"2020年9月13日","excerpt":"<h2> 前言</h2>\\n<p>自动化是devOps中重要的一个环节，借助于自动化构建、测试和发布等一些列动作，可以解放开发人员的双手，提高工作效率。这也是我们常说的持续集成（CI)，持续部署(CD)中比较重要的部分。自动化可以帮助我们减少人为的错误，而自动化一旦正确配置，就能永远正确的执行下去。自动化减少我们重复性的劳动从而使开发人员的双手解放出来，去做更多有意义的事情，提高人员能效。开发中自动生成一些代码？自动去区分环境启动？自动打包？自动部署？自动发布？自动报警... 等等，以上这些都可以归到自动化的范畴。</p>\\n","autoDesc":true}');export{e as data};
