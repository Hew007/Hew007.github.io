import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as l,b as n,d as s,e as t,f as p}from"./app-e03f41af.js";const u={},r=n("h2",{id:"概念",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概念","aria-hidden":"true"},"#"),s(" 概念")],-1),k=n("h3",{id:"什么是脚手架",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#什么是脚手架","aria-hidden":"true"},"#"),s(" 什么是脚手架？")],-1),d=n("p",null,"脚手架是可以快速生成工程化项目的一类工具。使用脚手架我们可以快速形成特定的项目目录，快速进行项目搭建和开发，而不是每次都自己从0去搭建一个项目结构。",-1),m=p(`<p>我们常见的vue-cli，create-react-app，angular-cli等都是脚手架工具，使用它们可以快速创建对象的工程化项目初始结构，然后再此基础上进行快速开发。以上都是官方的脚手架，有时候可能和我们自身对于的业务不太合适，以至于每次我们都要进行重新划分目录，引入和配置一些其他的插件等。此时，我们就可以根据自己项目定制自己的脚手架，以提高开发效率。</p><h3 id="常用的依赖工具包" tabindex="-1"><a class="header-anchor" href="#常用的依赖工具包" aria-hidden="true">#</a> 常用的依赖工具包</h3><p>创建自定义的脚手架是，我们常会用到以下依赖工具包，来实现常用的功能。</p><ul><li>execa: 操作shell工具</li><li>inquirer：交互式命令行工具，获取用户输入，根据用户输入做一些处理（比如命令行中做一些选择，等等）</li><li>commander：解析命令行参数，帮助生成提示信息等。</li><li>download-git-repo：从github下载远程仓库的模板</li><li>等等……</li></ul><p>我们可以访问vue，react，和angular等对应的官方脚手架源码，可以了解其项目中依赖都有哪些，哪些是常用的，都有哪些功能……</p><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><p>以vue-cli脚手架为例，当我们使用vue create xxx时，命令行会出现一系列让我们选择的提示，比如是否使用css预处理器，是否使用eslint，使用eslint什么标准的进行校验等等。最后会帮我们生成一个工程化目录，并安装对应的依赖。以上这些是如何实现的呢？</p><p>简单的说，就是利用commander定义我们自己的命令，比如create创建命令，remove删除命令等。然后使用inquirer给用户提示，处理用户输入，来达到和用户交互式效果。接着根据用户的选择，下载远程仓库的模板，生成对应的目录。最后安装依赖，完成创建。</p><p>其中，最重要的就是commander和inquirer这两个js库。</p><h2 id="commander介绍" tabindex="-1"><a class="header-anchor" href="#commander介绍" aria-hidden="true">#</a> commander介绍</h2><p>commander.js是一款基于node的强大命令行工具，提供了用户命令行输入和参数解析强大功能，能利用它快速配置自定义的命令行选项。绝大多数命令行工具都是通过commander进行开发的。</p><h3 id="基本命令配置" tabindex="-1"><a class="header-anchor" href="#基本命令配置" aria-hidden="true">#</a> 基本命令配置</h3><p>首先使用npm install -S commander安装commander，然后，引入commander。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> program <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;commander&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用option方法，定义参数选项。</p><p>option 第一个参数就是需要的定义的选项命令参数，包括别名/缩写；第二个参数为选项的简介。每个选项可以定义一个短选项名称（-后面接单个字符）和一个长选项名称（--后面接一个或多个单词），使用逗号、空格或<code>|</code>分隔。第三个参数可以接默认值或者执行函数。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>program
	<span class="token comment">// 创建一个create命令</span>
	<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-c, --create&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;create a projet&#39;</span><span class="token punctuation">)</span>
	<span class="token comment">// 创建一个delete命令 后面跟一个参数（文件名或和文件夹），第三个参数为执行的函数</span>
    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-d, --delete &lt;file&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;delete file&#39;</span><span class="token punctuation">,</span> handleDelFn<span class="token punctuation">)</span> 
	<span class="token comment">// 创建一个init命令 需要跟一个参数 项目名称</span>
    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-i, --init &lt;name&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;init a project width name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 解析命令行参数</span>
program<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印解析到的参数及配置信息</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;create:&#39;</span><span class="token punctuation">,</span> program<span class="token punctuation">.</span>create<span class="token punctuation">,</span> program<span class="token punctuation">.</span><span class="token function">opts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>option有两种最常用的选项，一类是 boolean 型选项，选项无需配置参数，另一类选项则可以设置参数（使用尖括号声明,如上面的delet 和 init）。如果在命令行中不指定具体的选项及参数，则会被定义为<code>undefined</code>。</p><p>我们创建了一个简单的create命令，不接收任何参数。这类是属于boolean类型的选项。delete和init为可以设置参数的命令，命令后面必须传递一个参数，否则将报错。</p><p>options第三个参数，可以接收一个函数，用户输入对应的命令后将执行对应的回调函数，我们可以依此进行一些逻辑处理。如上面的delet命令，接受一个文件路径，进行删除文件。</p><p>parse方法需要传递命令行输入的参数，即<code>process.argv</code>，commander会解析这些参数。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 输入及输出 假定cli名字为custom</span>
$ custom <span class="token parameter variable">-h</span> <span class="token comment"># commander会为我们自动创建命令</span>
<span class="token comment">#输出:</span>
  -c, <span class="token parameter variable">--create</span>        create a projet
  -d, <span class="token parameter variable">--delet</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>  delete <span class="token function">file</span>
  -i, <span class="token parameter variable">--init</span> <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>   init a project width name
  -h, <span class="token parameter variable">--help</span>          display <span class="token builtin class-name">help</span> <span class="token keyword">for</span> <span class="token builtin class-name">command</span>
  
$ custom <span class="token parameter variable">-xxx</span> <span class="token comment"># 输出： error: unknown option &#39;-v&#39;</span>

$ custom <span class="token parameter variable">-c</span> <span class="token comment"># 输出：create: true { version: &#39;1.0.0&#39;, create: true, delet: undefined, init: undefined }</span>

$ custom <span class="token parameter variable">-i</span> <span class="token comment"># 输出：error: option &#39;-i, --init &lt;name&gt;&#39; argument missing</span>

$ custom <span class="token parameter variable">-i</span> my <span class="token comment"># 输出 create: undefined { version: &#39;1.0.0&#39;, create: undefined, delet: undefined, init: &#39;my&#39; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="子命令配置" tabindex="-1"><a class="header-anchor" href="#子命令配置" aria-hidden="true">#</a> 子命令配置</h3><p>commander还支持子命令的配置，形如git clone xxx，git checkout xxx等等。这些，clone和checkout都属于git命令的子命令。</p><p>可以使用command()方法配置子命令：<code>command(&#39;clone &lt;source&gt; [destination]&#39;)</code></p><p><code>command()</code>接受一个字符串，包含命令、参数（使用尖括号）、和目标参数，中间使用空格隔开。使用description()定义命令的描述。用actions()方法定义要处理的方法，其接收一个回调函数，参数分别为source和destination。</p><p>代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>program	
	<span class="token comment">// 定义子命令参数结构</span>
	<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&#39;clone &lt;source&gt; [destination]&#39;</span><span class="token punctuation">)</span>
	<span class="token comment">// 命令描述</span>
    <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&#39;clone a repository into a newly created directory&#39;</span><span class="token punctuation">)</span>
	<span class="token comment">// 处理方法</span>
    <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> destination</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;source:&#39;</span><span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;destination:&#39;</span><span class="token punctuation">,</span> destination<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;clone command called&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ hew clone git.com/xxxx aaa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果：</p><img src="http://qncdn.yunishare.cn/image-20200826111227290.png@water" alt="image-20200826111227290" style="zoom:67%;">`,33),v={href:"https://github.com/tj/commander.js/blob/master/Readme_zh-CN.md",target:"_blank",rel:"noopener noreferrer"},b=p(`<h2 id="inquirer简介" tabindex="-1"><a class="header-anchor" href="#inquirer简介" aria-hidden="true">#</a> Inquirer简介</h2><p>Inquirer是一款基于node.js的命令行交互工具，可以通过其创建一个优雅的命令行交互效果。绝大部分脚手架也都采用了Inquirer解决方案。</p><p>我们主要使用到Inquirer.prompt()方法，去定义显示在命令行工具的信息，其返回一个Promise，结果为用户输入或者选择的参数。</p><p>示例：</p><p>提示用户是否继续操作</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 提示用户是否覆盖目录 返回布尔值</span>
<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> inquirer<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;createdir&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;confirm&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;dir has exist, overwrite your existed dir?&#39;</span><span class="token punctuation">,</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;res&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token comment">// res: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让用户选择一个选项</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 让用户选择一个选项</span>
<span class="token keyword">const</span> ops <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">await</span> inquirer<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;select&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;choose a ops&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">choices</span><span class="token operator">:</span> ops
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;res&#39;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span> <span class="token comment">// res: {select: 1(用户选择的值)}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),g={href:"https://github.com/SBoudrias/Inquirer.js#documentation",target:"_blank",rel:"noopener noreferrer"},h=p(`<h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><p>纸上得来终觉浅，绝知此事要躬行。根据上面的介绍，我们来实现一个自定义的脚手架。</p><h3 id="初始化一个项目" tabindex="-1"><a class="header-anchor" href="#初始化一个项目" aria-hidden="true">#</a> 初始化一个项目</h3><p>首先，我们创建一个文件夹，并初始化一个npm 项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">mkdir</span> test-cli <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> test-cli
$ <span class="token function">npm</span> init <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>配置项目目录，创建一个bin目录和src目录，分别为脚手架主目录和代码目录，并在package.json配置对应的js地址。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json 添加bin配置</span>
<span class="token property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./bin/test.js&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// test.js配置</span>
#<span class="token operator">!</span> <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>env node <span class="token comment">// 定义为node可执行文件</span>
<span class="token comment">// 从源代码导入主js 代码全部放在src中编写</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../src/index.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现自定义命令" tabindex="-1"><a class="header-anchor" href="#实现自定义命令" aria-hidden="true">#</a> 实现自定义命令</h3><p>这里我们先实现两个个基本命令，创建<code>create</code>， 删除 <code>delete</code>。create用来创建生成项目目录，delete用来删除目录或者文件。</p><p>在src目录下新建一个actions文件夹和两个js文件分别存放create和delete的逻辑。src目录下的index.js文件为入口文件。</p><h4 id="入口文件index-js" tabindex="-1"><a class="header-anchor" href="#入口文件index-js" aria-hidden="true">#</a> 入口文件index.js</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> program <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;commander&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 定义命令参数对象</span>
<span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// create命令</span>
    <span class="token literal-property property">create</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token string">&#39;ct&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">desc</span><span class="token operator">:</span> <span class="token string">&#39;create a project&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 删除命令</span>
    <span class="token keyword">delete</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token string">&#39;del&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">desc</span><span class="token operator">:</span> <span class="token string">&#39;delete a file form path&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 其他的命令处理</span>
    <span class="token string-property property">&#39;*&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">desc</span><span class="token operator">:</span> <span class="token string">&#39;command not found&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 遍历actions配置命令</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>actions<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    program
        <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// 定义命令字段</span>
        <span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span>actions<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>alias<span class="token punctuation">)</span> <span class="token comment">// 定义别名delete =&gt; del</span>
        <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span>actions<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>desc<span class="token punctuation">)</span> <span class="token comment">// 定义描述</span>
    	<span class="token comment">// 命令方法处理</span>
        <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> destination</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>actions<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>desc<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 向create.js和delete.js传递参数</span>
                <span class="token function">require</span><span class="token punctuation">(</span>
                    path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">./actions/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token comment">// 对应actions文件夹下的名称</span>
                <span class="token punctuation">)</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取第四个参数之后的参数</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

program<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在index.js中定义有哪些命令，然后，遍历此配置即可完成命令的配置，然后，根据导入的文件处理各个命令对应的逻辑。</p><h4 id="删除命令delete-js" tabindex="-1"><a class="header-anchor" href="#删除命令delete-js" aria-hidden="true">#</a> 删除命令delete.js</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> del <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;del&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
* 删除处理的函数
* <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">name</span> 文件或文件夹名称
*/</span> 
<span class="token keyword">const</span> <span class="token function-variable function">handleDelFn</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 解析要删除的文件夹路径</span>
    <span class="token keyword">const</span> dir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">./</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;dir&#39;</span><span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 调用del 删除文件夹</span>
    <span class="token keyword">await</span> <span class="token function">del</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;args:&#39;</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token comment">// [&#39;dir&#39;]</span>
    <span class="token function">handleDelFn</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>delete删除命令比较简单，只需要拿到文件夹或文件名，然后解析到全路径，调用del删除即可。</p><h4 id="创建项目create命令create-js" tabindex="-1"><a class="header-anchor" href="#创建项目create命令create-js" aria-hidden="true">#</a> 创建项目create命令create.js</h4><p>创建目录大致可分为以下两个个步骤：</p><ol><li>根据传入的路径判断是否已存在，存在则提示用户是否覆盖，否则直接创建</li><li>根据用户输入y/n 进行处理覆盖还是结束任务</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> inquirer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;inquirer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> del <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;del&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
* 判断路径目录是否存在，存在则调用inquirir 交互式命令 提示用户
* <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">projectName</span> 项目名称
*/</span>
<span class="token keyword">const</span> <span class="token function-variable function">existDir</span> <span class="token operator">=</span> <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token parameter">projectName</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取当前路径</span>
    <span class="token keyword">const</span> curDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;./&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取全路径</span>
    <span class="token keyword">const</span> newDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>curDir<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">./</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>projectName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// console.log(&#39;newDir&#39;, newDir)；</span>
    
    <span class="token comment">// 判断目录是否已经存在，如果不存在目录直接创建，并返回创建目录路径</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>newDir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span>newDir<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> newDir<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果已存在，使用inquirer 提示用户是否覆盖，返回一个boolean值</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> inquirer<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;createdir&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;confirm&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;dir has exist, can you overwrite?&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 提示语</span>
        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 默认值</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果用户选择覆盖，则删除当前文件下所有内容 然后再创建，并返回新创建的目录</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 强制删除</span>
        <span class="token keyword">await</span> <span class="token function">del</span><span class="token punctuation">(</span>newDir<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">force</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建文件夹</span>
        fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span>newDir<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> newDir<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;create dir has been cancle&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 以退出状态 1 指示 Node.js 同步地终止进程</span>
        process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">projectName</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建目录 如果存在提示用户是否覆盖</span>
    <span class="token keyword">const</span> dir <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">existDir</span><span class="token punctuation">(</span>projectName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;dir&#39;</span><span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行效果图：</p><figure><img src="http://qncdn.yunishare.cn/image-20200826150805482.png@water" alt="image-20200826150805482" tabindex="0" loading="lazy"><figcaption>image-20200826150805482</figcaption></figure><h3 id="在github上创建自己的template" tabindex="-1"><a class="header-anchor" href="#在github上创建自己的template" aria-hidden="true">#</a> 在github上创建自己的template</h3><p>创建项目的模板一般我们不会直接放在脚手架中，而是放在gitlab或者github中，这样即使更新了模板也不需要更新脚手架，我们只需要根据实际需要更新template即可。所以，我们需要先在github中创建一个模板仓库，然后使用github api拉去对应的模板即可。</p><p>这里我分别在github中创建了两个仓库，分别为vue-tpl和h5-tpl。并分别发布了几个版本，定义了对应的tag。之后我们就可以根据仓库repo和tag获取到远程仓库模板，下载到本地。</p><h3 id="使用github-api获取远程仓库上的模板" tabindex="-1"><a class="header-anchor" href="#使用github-api获取远程仓库上的模板" aria-hidden="true">#</a> 使用github api获取远程仓库上的模板</h3><p>获取仓库列表和仓库对应的tag版本，需要使用到两个github-api:</p>`,28),f={href:"https://docs.github.com/en/rest/reference/repos#list-repositories-for-a-user",target:"_blank",rel:"noopener noreferrer"},y={href:"https://docs.github.com/en/rest/reference/repos#list-repository-tags",target:"_blank",rel:"noopener noreferrer"},w=p(`<p>获取到仓库对应的tag之后，便可以使用download-git-repo下载对应的template到本地指定的目录</p><p>安装并引入axios，获取仓库列表和tag</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ......添加获取仓库及tag逻辑</span>
<span class="token comment">// 定义github api请求路径</span>
<span class="token keyword">const</span> baseGitApi <span class="token operator">=</span> <span class="token string">&#39;https://api.github.com&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 定义加载进度条对象</span>
<span class="token keyword">let</span> spinner <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 获取仓库列表 返回对应的仓库数组</span>
<span class="token keyword">const</span> <span class="token function-variable function">getReposList</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 加载的进度显示</span>
    spinner <span class="token operator">=</span> <span class="token function">ora</span><span class="token punctuation">(</span><span class="token string">&#39;Loading repos...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取仓库列表</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>baseGitApi<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/users/hew007/repos</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    spinner<span class="token punctuation">.</span><span class="token function">succeed</span><span class="token punctuation">(</span><span class="token string">&#39;Loading Success!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取符合条件的仓库名 由于这里模板仓库都是使用的-tpl后缀，所以可以筛选</span>
    <span class="token keyword">const</span> reposNames <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">ele</span> <span class="token operator">=&gt;</span> ele<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">tpl</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> reposNames<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 根据仓库 获取tag列表</span>
<span class="token keyword">const</span> <span class="token function-variable function">getReposTags</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">repo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 加载的友好进度条</span>
    spinner<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">&#39;Loading tags...&#39;</span><span class="token punctuation">;</span>
    spinner<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取tags</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>baseGitApi<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/repos/hew007/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>repo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/tags</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 加载成功显示</span>
    spinner<span class="token punctuation">.</span><span class="token function">succeed</span><span class="token punctuation">(</span><span class="token string">&#39;Loading Success!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取符合条件的仓库名</span>
    <span class="token keyword">const</span> reposTags <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">ele</span> <span class="token operator">=&gt;</span> ele<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    返回tags数组
    <span class="token keyword">return</span> reposTags<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">projectName</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建目录 如果存在提示用户是否覆盖</span>
    <span class="token keyword">const</span> dir <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">existDir</span><span class="token punctuation">(</span>projectName<span class="token punctuation">)</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;dir&#39;</span><span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 拉去github templete 选择指定的tag和仓库</span>
    <span class="token keyword">const</span> repos <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getReposList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;repos:&#39;</span><span class="token punctuation">,</span> repos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取用户选择的仓库repo</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> repo <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> inquirer<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;repo&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;choose a repo&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">choices</span><span class="token operator">:</span> repos
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    
    <span class="token comment">// 获取用户选择的tag</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;repo&#39;</span><span class="token punctuation">,</span> repo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取tags</span>
    <span class="token keyword">const</span> tags <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getReposTags</span><span class="token punctuation">(</span>repo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 让用户选择使用哪一个版本的tag</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> tag <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> inquirer<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;tag&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;choose a tag&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">choices</span><span class="token operator">:</span> tags
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;select-tag&#39;</span><span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="下载git仓库中的模板" tabindex="-1"><a class="header-anchor" href="#下载git仓库中的模板" aria-hidden="true">#</a> 下载git仓库中的模板</h3>`,4),x={href:"https://www.npmjs.com/package/download-git-repo",target:"_blank",rel:"noopener noreferrer"},j=p(`<p>download(path, destination, callback)</p><p>我们可以添加以下代码到exports中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 下载模板</span>
<span class="token keyword">let</span> downUrl <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hew007/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>repo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/#</span><span class="token template-punctuation string">\`</span></span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    downUrl <span class="token operator">+=</span> tag<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;url:&#39;</span><span class="token punctuation">,</span> downUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 下载模板并安装对应的依赖</span>

<span class="token comment">// 加载中的交互提示</span>
spinner<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">&#39;download template...&#39;</span><span class="token punctuation">;</span>
spinner<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 要下载到的目录，这里我们以/temp目录为例</span>
<span class="token keyword">const</span> destinationDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">&#39;./temp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;destinationDir&#39;</span><span class="token punctuation">,</span> destinationDir<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 执行下载模板</span>
<span class="token function">downloadRepo</span><span class="token punctuation">(</span>downUrl<span class="token punctuation">,</span> destinationDir<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    spinner<span class="token punctuation">.</span><span class="token function">succeed</span><span class="token punctuation">(</span><span class="token string">&#39;download Success!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="进入项目目录-安装依赖" tabindex="-1"><a class="header-anchor" href="#进入项目目录-安装依赖" aria-hidden="true">#</a> 进入项目目录，安装依赖</h3><p>下载完成后，我们需要进入到创建的目录，然后安装对应的依赖。由于我们是在js里面，需要使用到shell命令，所以需要使用到一个shelljs的依赖包。</p><p>在下载完成的回调函数中增加安装依赖步骤</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">downloadRepo</span><span class="token punctuation">(</span>downUrl<span class="token punctuation">,</span> destinationDir<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    spinner<span class="token punctuation">.</span><span class="token function">succeed</span><span class="token punctuation">(</span><span class="token string">&#39;download Success!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 进入到下载到的文件夹</span>
    shell<span class="token punctuation">.</span><span class="token function">cd</span><span class="token punctuation">(</span>destinationDir<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    spinner<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">&#39;install depends...&#39;</span><span class="token punctuation">;</span>
    spinner<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 安装依赖</span>
    shell<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;npm install&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    spinner<span class="token punctuation">.</span><span class="token function">succeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="发布到npm" tabindex="-1"><a class="header-anchor" href="#发布到npm" aria-hidden="true">#</a> 发布到npm</h2><p>创建一个npm账户，验证邮箱（不然发布不了）。使用npm login 输入账户和密码进行登录，然后使用npm publish即可发布到npm上。之后我们便可以直接全局安装使用此脚手架。</p>`,9);function _(q,D){const a=o("ExternalLinkIcon");return c(),i("div",null,[r,k,d,l(" more "),m,n("p",null,[s("以上就是commander使用的一些基本介绍，详细介绍请参考："),n("a",v,[s("Commander.js中文文档"),t(a)]),s("。")]),b,n("p",null,[s("更多使用介绍请参考："),n("a",g,[s("Inquirer介绍"),t(a)])]),h,n("ul",null,[n("li",null,[n("a",f,[s("list-repositories-for-a-user"),t(a)]),s(" 获取用户下的仓库数据")]),n("li",null,[n("a",y,[s("list-repository-tags"),t(a)]),s(" 根据仓库获取tags")])]),w,n("p",null,[s("获取到对应的tag或者分支后，我们可以使用"),n("a",x,[s("download-git-repo"),t(a)]),s("下载对应的文件到本地指定目录。download-git-repo支持github、gitlab和Bitbucket。其download方法接收三个参数，第一个参数是下载的地址，格式为owner/name#my-branch(tag)，第二个参数为目标地址，即要下载到本地的路径。第三个参数为要执行的回调函数。")]),j])}const S=e(u,[["render",_],["__file","custom-cli-by-commander.html.vue"]]);export{S as default};
