import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as c,c as i,a as d,b as n,d as e,e as a,f as o}from"./app-fe5c3a7f.js";const r={},p=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),e(" 前言")],-1),u=n("p",null,"最新项目需要用到MongoDB作为数据库进行开发，再次重新学习总结下MongoDB安装、配置以及服务启动状态监控相关得操作，做一个记录和分享。",-1),m=n("p",null,"MongoDB 是一个基于分布式文件存储的数据库，是一个开源的文档数据库，它基于 C++ 语言编写，性能高，可用性强，能够自动扩展。 MongoDB 是最流行的 NoSQL 数据库之一。",-1),b=n("h2",{id:"mongodb安装",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mongodb安装","aria-hidden":"true"},"#"),e(" MongoDB安装")],-1),g=n("p",null,"MongoDB安装可以进行全局安装，也可以通过Docker容器进行安装，这里推荐使用Docker进行安装和管理。",-1),v=n("h3",{id:"全局安装",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#全局安装","aria-hidden":"true"},"#"),e(" 全局安装")],-1),k={href:"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/%E5%AE%89%E8%A3%85",target:"_blank",rel:"noopener noreferrer"},h=o(`<ol><li><p>配置系统包管理工具文件</p><p>首先，执行 <code>vi /etc/yum.repos.d/mongodb-org-4.4.repo</code> 在<code>/etc/yum.repos.d/</code> 目录下，创建并编辑MongoDB的包安装配置文件<code>mongodb-org-4.4.repo</code> ，这里已最新版本4.4为例。</p><p>然后将以下配置代码写入到配置文件中：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[mongodb-org-4.4]  
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.4/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://www.mongodb.org/static/pgp/server-4.4.asc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用yum安装MongoDB包</p><p>在命令行中执行 <code>sudo yum install -y mongodb-org</code>，将会按照最新稳定版本的MongoDB，等待其安装完成即可。</p></li><li><p>安装完成后，启动Mongo服务。</p><p>可以使用命令：<code>service mongod status</code> 或者 <code>systemctl status mongod</code> 查看 mongo 服务是否启动。如果未启动，需要执行命令 <code>service mongo start</code> 启动mongo服务。</p></li><li><p>加入开机自启 <code>systemctl enable start</code></p></li><li><p>启用身份验证和远程连接</p><p>使用 <code>vi /etc/mongod.conf</code> 打开mongo 配置文件，找到 net 配置，将bindIP修改为 <code>0.0.0.0</code></p><p>然后找到security配置，将权限<code>authorization</code>设置为“enable”，如下所示，然后，重启服务即可。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># network interfaces
net:
  port: 27017
  bindIp: 0.0.0.0  # 127.0.0.1 =&gt; 0.0.0.0
  
security:
  authorization: &quot;enabled&quot;   # disable or enabled
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="docker-docker-compose-安装" tabindex="-1"><a class="header-anchor" href="#docker-docker-compose-安装" aria-hidden="true">#</a> Docker（docker-compose)安装</h3><p>使用docker方式安装MongoDB比较简单，直接执行命令 <code>sudo docker run --name my-mongo -d mongo:4.4</code> ，docker便会自动拉去对应的镜像并启动。也可以使用docker-compose进行安装，推荐使用docker-compose方式进行安装，也便于维护管理。</p><p>使用docker-compose方式安装，首先要创建并配置对应的docker-compose.yml文件，下面为使用的一个配置供参考：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.1&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">mongo</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mongo  <span class="token comment"># 镜像</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token comment"># 是否自动重启</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> <span class="token string">&#39;monge_db&#39;</span> <span class="token comment"># 容器名称</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">MONGO_INITDB_ROOT_USERNAME</span><span class="token punctuation">:</span> root  <span class="token comment"># root账户</span>
      <span class="token key atrule">MONGO_INITDB_ROOT_PASSWORD</span><span class="token punctuation">:</span> admin@root22  <span class="token comment"># root密码</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 27018<span class="token punctuation">:</span><span class="token number">27017</span>  <span class="token comment"># 映射的端口</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> /home/mongo/db_data<span class="token punctuation">:</span>/data/db  <span class="token comment"># 数据映射到宿主机的目录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建完配置文件，直接使用命令 <code>sudo docker-compose up -d</code> 运行，docker将会按照yaml文件中配置拉去对应的镜像并启动。</p><h2 id="管理" tabindex="-1"><a class="header-anchor" href="#管理" aria-hidden="true">#</a> 管理</h2><p>对于MongoDB日常管理可以使用命令行的方式进行管理，做一些GURD操作。也可以使用GUI应用进行管理。</p><p>管理MongoDB的GUI工具这里推荐使用Robo 3T。如下，很方便进行GURD等操作。</p><img src="http://qncdn.yunishare.cn/image-20201018154204925.png@water" alt="image-20201018154204925" style="zoom:50%;"><h3 id="使用命令行进行mongo数据库操作" tabindex="-1"><a class="header-anchor" href="#使用命令行进行mongo数据库操作" aria-hidden="true">#</a> 使用命令行进行mongo数据库操作</h3><h4 id="创建用户、配置权限" tabindex="-1"><a class="header-anchor" href="#创建用户、配置权限" aria-hidden="true">#</a> 创建用户、配置权限</h4><p>如果是全局安装的mongo，初始化之后需要配置root账户及密码，再配置几个其他权限的用户，用户数据库远程连接。</p><p>创建root用户和用户认证</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// 展示已创建的数据库
db
// 使用admin数据库
<span class="token operator">&gt;</span> use admin
switched to db admin
// 创建root账户和密码
<span class="token operator">&gt;</span> db.createUser<span class="token punctuation">(</span><span class="token punctuation">{</span> user:<span class="token string">&quot;root&quot;</span>, pwd:<span class="token string">&quot;12345678&quot;</span>, roles:<span class="token punctuation">[</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
Successfully added user: <span class="token punctuation">{</span> <span class="token string">&quot;user&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;root&quot;</span>, <span class="token string">&quot;roles&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;root&quot;</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span>

// 切换到test数据库
<span class="token operator">&gt;</span> use <span class="token builtin class-name">test</span>
switched to db <span class="token builtin class-name">test</span>
// 用户认证，相当于登录，如果没有登录，则无法进行下一步操作
<span class="token operator">&gt;</span> db.auth<span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span>, <span class="token string">&#39;password&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">1</span> // <span class="token number">1</span>就表示成功
// 创建新用户
<span class="token operator">&gt;</span> db.createUser<span class="token punctuation">(</span><span class="token punctuation">{</span> user:<span class="token string">&quot;test&quot;</span>, pwd:<span class="token string">&quot;123456&quot;</span>, roles:<span class="token punctuation">[</span><span class="token string">&quot;readWrite&quot;</span>, <span class="token string">&quot;dbAdmin&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
Successfully added user: <span class="token punctuation">{</span> <span class="token string">&quot;user&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;root&quot;</span>, <span class="token string">&quot;roles&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">&quot;readWrite&quot;</span>, <span class="token string">&quot;dbAdmin&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>远程连接数据库</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 终端连接
mongo 10.128.218.14:27017/database -u username -p password
// mongoose方式连接
mongoose.connect(&#39;mongodb://username:password@host:port/database?options...&#39;, {useNewUrlParser: true});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="gurd常用操作" tabindex="-1"><a class="header-anchor" href="#gurd常用操作" aria-hidden="true">#</a> GURD常用操作</h4><p>create创建、新增</p>`,19),_={href:"https://docs.mongodb.com/manual/reference/method/db.collection.insertOne/#db.collection.insertOne",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"db.collection.insertOne()",-1),x={href:"https://docs.mongodb.com/manual/reference/method/db.collection.insertMany/#db.collection.insertMany",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"db.collection.insertMany()",-1),q=n("p",null,"删除、移除",-1),M={href:"https://mongodb.net.cn/manual/reference/method/db.collection.deleteOne/#db.collection.deleteOne",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"db.collection.deleteOne()",-1),O={href:"https://mongodb.net.cn/manual/reference/method/db.collection.deleteMany/#db.collection.deleteMany",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"db.collection.deleteMany()",-1),w=n("p",null,"更改、更新数据",-1),I={href:"https://docs.mongodb.com/manual/reference/method/db.collection.updateOne/#db.collection.updateOne",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"db.collection.updateOne()",-1),R={href:"https://docs.mongodb.com/manual/reference/method/db.collection.updateMany/#db.collection.updateMany",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"db.collection.updateMany()",-1),S={href:"https://docs.mongodb.com/manual/reference/method/db.collection.replaceOne/#db.collection.replaceOne",target:"_blank",rel:"noopener noreferrer"},U=n("code",null,"db.collection.replaceOne()",-1),A=n("p",null,"查询",-1),G={href:"https://docs.mongodb.com/manual/reference/method/db.collection.find/#db.collection.find",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"db.collection.find()",-1),T=o(`<h2 id="监控mongo服务" tabindex="-1"><a class="header-anchor" href="#监控mongo服务" aria-hidden="true">#</a> 监控Mongo服务</h2><p>Mongo 可以设置随系统重启，但是，这并不满足我们的需求，我们希望mongo服务意外停止后能自动启动，所以此时就需要跑一个定时脚本，去监听mongo服务的运行状态，如果mongo服务已停止就重启它。这是，就需要用到Linux corntab 定时任务处理了。</p><p>首先，建立要执行的脚本sh</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">exec</span> <span class="token operator"><span class="token file-descriptor important">1</span>&gt;&gt;</span>crawl_log   <span class="token comment"># 输出标准日志到crawl_log</span>
<span class="token builtin class-name">exec</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;&gt;</span>crawl_log_err  <span class="token comment"># 输出标准错误日志到crawl_log_err</span>
<span class="token comment">#!/bin/sh</span>
<span class="token builtin class-name">.</span> ~/.bash_profile  <span class="token comment"># 设置环境</span>
<span class="token comment"># 下面放置要执行的脚本即可</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，使用vi编辑<code>/var/spool/cron/$user(对应用户名，如root)</code>，添加定时任务设置，设置执行频率以及要执行的文件路径。如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 每15分钟执行 /home/xxxx目录下的 test.sh文件</span>
*/15 * * * * <span class="token builtin class-name">cd</span> /home/xxxxx <span class="token operator">&amp;&amp;</span> <span class="token function">sh</span> test.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，保存退出即可。</p>`,7);function L(V,z){const s=l("ExternalLinkIcon");return c(),i("div",null,[p,u,m,d(" more "),b,g,v,n("p",null,[e("MongoDB 在Linux系统中安装，可以直接参考官方文档："),n("a",k,[e("安装MongoDB（Install MongoDB Community Edition on Red Hat or CentOS）"),a(s)]),e("。本文都是以CentOS为例进行说明。")]),h,n("ul",null,[n("li",null,[n("a",_,[f,a(s)]),e(" 插入一条数据")]),n("li",null,[n("a",x,[y,a(s)]),e(" 插入多条数据")])]),q,n("ul",null,[n("li",null,[n("a",M,[D,a(s)]),e(" 删除一条数据")]),n("li",null,[n("a",O,[B,a(s)]),e(" 删除多条数据")])]),w,n("ul",null,[n("li",null,[n("a",I,[N,a(s)]),e(" 更新一条数据")]),n("li",null,[n("a",R,[E,a(s)]),e(" 更新多条数据")]),n("li",null,[n("a",S,[U,a(s)]),e(" 替换数据")])]),A,n("ul",null,[n("li",null,[n("a",G,[C,a(s)]),e(" 查询数据")])]),T])}const $=t(r,[["render",L],["__file","mongodb-install-and-manage-mongo.html.vue"]]);export{$ as default};
