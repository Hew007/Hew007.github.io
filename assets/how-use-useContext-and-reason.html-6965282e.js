import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as l,a as i,b as n,d as s,e as t,f as e}from"./app-fe5c3a7f.js";const u={},r=e('<blockquote><p>文章为去年所写，最近翻到笔记，为了熟悉一下，也为了方便看，将其放在博客中</p></blockquote><h2 id="context" tabindex="-1"><a class="header-anchor" href="#context" aria-hidden="true">#</a> Context</h2><h3 id="什么是context" tabindex="-1"><a class="header-anchor" href="#什么是context" aria-hidden="true">#</a> 什么是Context</h3><p>想象一下，我们有一个 React 应用，其中包含一个父组件，其中包含许多级别的子组件，以及子组件的子组件。 现在，我们要将数据从最上面的组件一直传递到最后一个子组件。在 React 中，数据通常通过props从一个组件自上而下传递到另一个组件。此时我们通过每个组件，通过它们的 props 传递该数据，直到到达最后一个子组件。如果这样的嵌套树形结构有5层或10层，那么将是灾难式的开发维护体验，并且容易出错。如果能不经过中间的节点直接到达需要的地方就可以避免这种问题，这时 Context api 就是来解决这个问题的。 Context API 允许我们轻松访问组件树中不同层级的数据，而不必通过 props 向下传递数据。</p><h4 id="使用-context" tabindex="-1"><a class="header-anchor" href="#使用-context" aria-hidden="true">#</a> 使用 Context</h4>',5),d=n("img",{src:"https://cdn.nlark.com/yuque/0/2022/png/2400472/1642078691275-d2e67786-67d0-4f40-b60b-ccaeeb74ad48.png#clientId=u9f6342bc-7072-4&from=paste&height=187&id=u6ef158b2&originHeight=187&originWidth=361&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3226&status=done&style=none&taskId=ube9ecbd4-4443-4356-b934-72f897dea2c&title=&width=361",alt:"image.png",loading:"lazy"},null,-1),k={href:"https://codesandbox.io/s/modest-roentgen-yeyiq?file=/src/components/Button.jsx",target:"_blank",rel:"noopener noreferrer"},v=e(`<p>组件层级结构如下 <code>App =&gt;Toolbar =&gt; ThemedButton =&gt;Button</code></p><h4 id="创建-context" tabindex="-1"><a class="header-anchor" href="#创建-context" aria-hidden="true">#</a> 创建 context</h4><p>使用 <code>createContext()</code> 来创建一个 context，为当前的 theme 创建一个 context（green为默认值）</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">&#39;green&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="provider-value提供值" tabindex="-1"><a class="header-anchor" href="#provider-value提供值" aria-hidden="true">#</a> Provider value提供值</h4><p>使用 <code>Provider</code> 包裹子节点，将 <code>context</code> 提供给子节点，<code>value</code>为要传入给子孙节点的值</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> theme <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Toolbar</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeContext.Provider</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="consume-value消费值" tabindex="-1"><a class="header-anchor" href="#consume-value消费值" aria-hidden="true">#</a> Consume Value消费值</h4><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeContext.Consumer</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token punctuation">{</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> value <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeContext.Consumer</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="在使用的节点处消费-context" tabindex="-1"><a class="header-anchor" href="#在使用的节点处消费-context" aria-hidden="true">#</a> 在使用的节点处消费 Context</h4><p>更新Context 我们不光需要获取<code>context</code>值，有时候我们页需要从一个在组件树中嵌套很深的组件中更新 context 。在这种场景下，我们可以通过 <code>context</code> 传递一个函数，使得 <code>consumers</code> 组件更新 <code>context</code>： <strong>创建一个带有更新函数的context</strong></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 创建一个带有更新函数的context</span>
<span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
     <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span>
     <span class="token function-variable function">update</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>provider</code>处提供自定义的更新函数</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>theme<span class="token punctuation">,</span> setTheme<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 更新函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">updateTheme</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">theme</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setTheme</span><span class="token punctuation">(</span>theme<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// dom使用</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> theme<span class="token punctuation">,</span> <span class="token literal-property property">update</span><span class="token operator">:</span> updateTheme <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Toolbar</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeContext.Provider</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在子组件中更新context</strong></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
    <span class="token comment">// 指定 contextType 读取当前的 theme context。</span>
    <span class="token comment">// React 会往上找到最近的 theme Provider，然后使用它的值。</span>
    <span class="token comment">// 在这个例子中，当前的 theme 值为 “dark”。</span>
    <span class="token comment">// static contextType = ThemeContext;</span>

    <span class="token keyword">static</span> contextType <span class="token operator">=</span> ThemeContext<span class="token punctuation">;</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
                    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span>
                    <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>theme <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
                <span class="token punctuation">&gt;</span></span><span class="token plain-text">
                    </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span><span class="token plain-text">
                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hr</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
                    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span>
                    <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">&quot;blue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
                <span class="token punctuation">&gt;</span></span><span class="token plain-text">
                    点我变蓝
                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 使用consume</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usecontext" tabindex="-1"><a class="header-anchor" href="#usecontext" aria-hidden="true">#</a> useContext</h3><h4 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h4><p>在子孙组件中要获取到<code>context</code>的值，必须通过类组件的<code>contextType</code>，或者通过<code>consumers</code> 组件进行获取，而且，如果是函数式组件则只能使用<code>consumers</code> 组件消费value，如果是多个<code>context</code>使用起来则更不方便。为此，React提供了一个可以直接获取context对象的方式：<strong>useContext</strong>。 <code>useContext</code>接收一个 <code>context</code> 对象（<code>React.createContext </code>的返回值）并返回该 context 的当前值。当前的 context 值由上层组件中距离当前组件最近的 <code>&lt;MyContext.Provider&gt;</code> 的 value prop 决定。 当组件上层最近的 <code>&lt;MyContext.Provider&gt; </code>更新时，该 <code>Hook</code> 会触发重渲染，并使用最新传递给 <code>MyContext provider </code>的 <code>context value</code> 值。即使祖先使用 <code>React.memo</code> 或 <code>shouldComponentUpdate</code>，也会在组件本身使用 <code>useContext</code> 时重新渲染。调用了 <code>useContext</code> 的组件总会在 context 值变化时重新渲染。</p><blockquote><p>注意：别忘记 useContext 的参数必须是 context 对象本身：</p></blockquote><h4 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h4><p>在需要获取context值的子组件中直接获取，获取到的值可以直接使用。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>ThemeContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>theme<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;green&#39; 即最近一层provider提供的值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="和类组件中使用的对比" tabindex="-1"><a class="header-anchor" href="#和类组件中使用的对比" aria-hidden="true">#</a> 和类组件中使用的对比</h4><p>类中需要使用<code>contextType</code>， 然后通过<code>this.context</code>获取</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">static</span> contextType <span class="token operator">=</span> ThemeContext<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">)</span> <span class="token comment">// &#39;green&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>而使用<code>useContext</code>则很方便 直接使用<code>useContext</code>创建即可。通过 useContext 可以极大的减小多个 Context 使用的代码复杂的问题。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>ThemeContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="使用usecontext更新context" tabindex="-1"><a class="header-anchor" href="#使用usecontext更新context" aria-hidden="true">#</a> 使用useContext更新context</h4><p>useContext更新方式，除了使用和上述更新context的方式，我们也可以用下面看起来很像useHook的方式进行context的定义和更新</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>theme<span class="token punctuation">,</span> setTheme<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>theme<span class="token punctuation">,</span> setTheme<span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Toolbar</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeContext.Provider</span></span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">Button</span> <span class="token operator">=</span> <span class="token parameter">props</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>theme<span class="token punctuation">,</span> setTheme<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>ThemeContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> theme <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
                </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hr</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTheme</span><span class="token punctuation">(</span><span class="token string">&quot;blue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
                点我变蓝
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h4><blockquote><p>useContext(MyContext) 相当于 class 组件中的 static contextType = MyContext 或者 &lt;MyContext.Consumer&gt;。</p></blockquote><blockquote><p>useContext(MyContext) 只是让你能够读取 context 的值以及订阅 context 的变化。你仍然需要在上层组件树中使用 &lt;MyContext.Provider&gt; 来为下层组件提供 context。</p></blockquote><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h3><h4 id="createcontext" tabindex="-1"><a class="header-anchor" href="#createcontext" aria-hidden="true">#</a> createContext</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> MyContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>defaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/react/src/ReactContext.js</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">createContext</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>defaultValue<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> ReactContext<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// TODO: Second argument used to be an optional \`calculateChangedBits\`</span>
  <span class="token comment">// function. Warn to reserve for future use?</span>

  <span class="token keyword">const</span> context<span class="token operator">:</span> ReactContext<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// ReactContext中的$$typeof是作为createElement中的属性type中的对象进行存储的</span>
    $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token constant">REACT_CONTEXT_TYPE</span><span class="token punctuation">,</span>
    <span class="token comment">// 作为支持多个并发渲染器的解决方法，我们将一些渲染器分类为主要渲染器，将其他渲染器分类为辅助渲染器。    </span>
    <span class="token comment">// As a workaround to support multiple concurrent renderers, we categorize    </span>
    <span class="token comment">// some renderers as primary and others as secondary.   </span>

    <span class="token comment">// 我们只希望最多有两个并发渲染器：React Native（主要）和Fabric（次要）;    </span>
    <span class="token comment">// React DOM（主要）和React ART（次要）。    </span>
    <span class="token comment">// 辅助渲染器将自己的context的value存储在单独的字段中。    </span>
    <span class="token comment">// We only expect    </span>
    <span class="token comment">// there to be two concurrent renderers at most: React Native (primary) and    </span>
    <span class="token comment">// Fabric (secondary); React DOM (primary) and React ART (secondary).   </span>
    <span class="token comment">// Secondary renderers store their context values on separate fields. </span>

    <span class="token comment">// &lt;Provider value={xxx}&gt;中的value就是赋值给_currentValue的    </span>
    <span class="token comment">// 也就是说_currentValue和_currentValue2作用是一样的，只是分别给主渲染器和辅助渲染器使用</span>

    _currentValue<span class="token operator">:</span> defaultValue<span class="token punctuation">,</span> <span class="token comment">// Provider 的value 属性</span>
    _currentValue2<span class="token operator">:</span> defaultValue<span class="token punctuation">,</span> <span class="token comment">// Provider 的value 属性</span>
    <span class="token comment">// Used to track how many concurrent renderers this context currently</span>
    <span class="token comment">// supports within in a single renderer. Such as parallel server rendering.</span>
    _threadCount<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 用来追踪 context 的并发渲染器数量</span>
    <span class="token comment">// These are circular</span>
    Provider<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 提供组件</span>
    Consumer<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 应用组件</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 给context对象添加 Provider 属性，并且 Provider 中的_context指向的是 context 对象</span>
  context<span class="token punctuation">.</span>Provider <span class="token operator">=</span> <span class="token punctuation">{</span>
    $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token constant">REACT_PROVIDER_TYPE</span><span class="token punctuation">,</span>
    _context<span class="token operator">:</span> context<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> hasWarnedAboutUsingNestedContextConsumers <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> hasWarnedAboutUsingConsumerProvider <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> hasWarnedAboutDisplayNameOnConsumer <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 删除了 DEV 部分的代码</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 也就是Consumber对象指向React.Context对象    </span>
    <span class="token comment">// 在&lt;Consumer&gt;进行渲染时，为了保证Consumer拿到最新的值，    </span>
    <span class="token comment">// 直接让Consumer=React.Context，    </span>
    <span class="token comment">// React.Context中的_currentValue已经被&lt;Provider&gt;的value给赋值了    </span>
    <span class="token comment">// 所以Consumer能立即拿到最新的值</span>
    context<span class="token punctuation">.</span>Consumer <span class="token operator">=</span> context<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 删除了 DEV 部分的代码</span>

  <span class="token keyword">return</span> context<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>createContext</code> 中，构建一个 context 对象，将传递进来的 <code>defaultValue</code> 赋值给 context 对象的 <code>_currentValue</code> 和 <code>_currentValue2</code> 属性，并在 context 对象上定义了一个用来追踪 context 并发渲染器数量的 <code>_threadCount</code> 属性，一个为 <code>Consumer</code>组件提供 value 的 <code>Provider</code>组件，和一个用于消费 context 的 <code>Consumer</code>组件。 <code>_currentValue</code> 和 <code>_currentValue2</code> 两个属性是为了适配不同的平台，如 Web端、移动端。这两个属性在 context 对象初始化时都会赋值为传入的 <code>defaultValue</code> 。在 React 更新的过程中，会一直有一个叫做 valueCursor 的栈，这个栈可以帮助记录当前的 context，每次更新组件的时候，<code>_currentValue</code> 和 <code>_currentValue2</code> 都会被赋值为最新的value。 context 对象构建好之后，就将当前的 context 对象分别挂载到 <code>Provider</code> 组件和 <code>Consumer</code> 组件上。 最后将该 context 对象返回，其数据结构如下： <img src="https://cdn.nlark.com/yuque/0/2022/png/2400472/1642944504738-b915ac2d-fae5-4bbd-afb9-8544de33340d.png#clientId=u41fb8d3c-4d9a-4&amp;from=paste&amp;height=837&amp;id=u18f6e9c1&amp;originHeight=837&amp;originWidth=799&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=175297&amp;status=done&amp;style=none&amp;taskId=u64ba2d30-6cf8-4ba2-bbca-061220a7f86&amp;title=&amp;width=799" alt="image.png" loading="lazy"></p><h4 id="usecontext-1" tabindex="-1"><a class="header-anchor" href="#usecontext-1" aria-hidden="true">#</a> useContext</h4><p><code>useContext</code>在<code>mount</code>时主要会调用<code>readContext</code>函数。可以看到，<code>readContext</code>会创建一个<code>contextItem</code>并以链表的结构记录在对应<code>fiber.dependencies</code>上，最后将<code>Provider</code>的<code>prop</code>上的<code>value</code>返回。 <code>readContext</code> 把 context 对象上的 <code>_currentValue</code>取出来，接着构建一个新的 context项，该 context 项上存储着当前的 context 对象和 context 对象上的 <code>_currentValue</code>，并通过 <code>next</code> 指针连接下一个 context 项，接着构建一个 context 依赖列表，并将该列表挂载到当前正在渲染的 <code>Fiber</code> 节点，最后返回从 context 对象上取出来的 <code>_currentValue</code>。 <code>readContext</code> 接收一个 context 对象 (<code>React.createContext </code>的返回值) 并返回该 context 的当前值。我们接下来看看这个 context 对象和该 context 的当前值。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">readContext</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>context<span class="token operator">:</span> ReactContext<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>

      <span class="token comment">// 删除了Dev部分代码</span>

  <span class="token comment">// 以下两个属性是为了适配多平台（浏览器端/移动端）</span>
  <span class="token comment">// _currentValue</span>
  <span class="token comment">// _currentValue2</span>

  <span class="token comment">// ReactDOM 中 isPrimaryRenderer 为 true，定义的就是 true</span>
  <span class="token comment">// 实际就是一直会返回  context._currentValue</span>
  <span class="token keyword">const</span> value <span class="token operator">=</span> isPrimaryRenderer
    <span class="token operator">?</span> context<span class="token punctuation">.</span>_currentValue
    <span class="token operator">:</span> context<span class="token punctuation">.</span>_currentValue2<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>lastFullyObservedContext <span class="token operator">===</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Nothing to do. We already observe everything in this context.</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 新建一个 context 链表的节点，节点上存储着传递进来的 context 对象 和 context 对象上的value</span>
    <span class="token comment">//  next 指针连接下一个 context 项</span>
    <span class="token keyword">const</span> contextItem <span class="token operator">=</span> <span class="token punctuation">{</span>
      context<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> ReactContext<span class="token operator">&lt;</span>mixed<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      memoizedValue<span class="token operator">:</span> value<span class="token punctuation">,</span>
      next<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastContextDependency <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token comment">// 删除了部分代码</span>

      <span class="token comment">// This is the first dependency for this component. Create a new list.</span>
      <span class="token comment">// 这是组件的第一个依赖项，创建一个新的 context 依赖列表</span>
      lastContextDependency <span class="token operator">=</span> contextItem<span class="token punctuation">;</span>
      currentlyRenderingFiber<span class="token punctuation">.</span>dependencies <span class="token operator">=</span> <span class="token punctuation">{</span>
        lanes<span class="token operator">:</span> NoLanes<span class="token punctuation">,</span>
        firstContext<span class="token operator">:</span> contextItem<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>enableLazyContextPropagation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        currentlyRenderingFiber<span class="token punctuation">.</span>flags <span class="token operator">|=</span> NeedsPropagation<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// Append a new context item.</span>
      <span class="token comment">// 在链表后面添加一个新的 context 项</span>
      lastContextDependency <span class="token operator">=</span> lastContextDependency<span class="token punctuation">.</span>next <span class="token operator">=</span> contextItem<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// readContext最终返回的是context._currentValue</span>
  <span class="token keyword">return</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hook-规则" tabindex="-1"><a class="header-anchor" href="#hook-规则" aria-hidden="true">#</a> Hook 规则</h2><p>Hook 本质就是 JavaScript 函数，但是在使用它时需要遵循两条规则：</p><h3 id="只在最顶层使用-hook" tabindex="-1"><a class="header-anchor" href="#只在最顶层使用-hook" aria-hidden="true">#</a> 只在最顶层使用 Hook</h3><p>不要在循环，条件或嵌套函数中调用 Hook， 确保在React 函数的最顶层以及任何 return 之前调用hook。 遵守这条规则，你就能确保 Hook 在每一次渲染中都按照同样的顺序被调用。这让 React 能够在多次的 useState 和 useEffect 调用之间保持 hook 状态的正确。</p><h3 id="只在-react-函数中调用-hook" tabindex="-1"><a class="header-anchor" href="#只在-react-函数中调用-hook" aria-hidden="true">#</a> 只在 React 函数中调用 Hook</h3><p>不要在普通的 JavaScript 函数中调用 Hook。可以： 在 React 的函数组件中调用 Hook 在自定义 Hook 中调用其他 Hook</p><h3 id="代码约束" tabindex="-1"><a class="header-anchor" href="#代码约束" aria-hidden="true">#</a> 代码约束</h3><p>我们可以通过使用 <code>eslint-plugin-react-hooks </code>的 ESLint 插件来强制执行这两条规则。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,53),m={href:"https://juejin.cn/post/7030546337552662564",target:"_blank",rel:"noopener noreferrer"},x={href:"https://juejin.cn/post/6844904153584500749",target:"_blank",rel:"noopener noreferrer"},b={href:"https://zh-hans.reactjs.org/docs/context.html",target:"_blank",rel:"noopener noreferrer"};function h(g,y){const a=p("ExternalLinkIcon");return c(),l("div",null,[r,i("- more -"),n("p",null,[s("下面将以一个示例，简单展示Context的使用，图中按钮的颜色是一个深层次的子组件通过context进行传递的，效果如下： "),d,s(" codesanbox实例："),n("a",k,[s("https://codesandbox.io/s/modest-roentgen-yeyiq?file=/src/components/Button.jsx"),t(a)])]),v,n("ol",null,[n("li",null,[n("a",m,[s("React Hooks 源码解读之 useContext"),t(a)])]),n("li",null,[n("a",x,[s("React Hooks 系列之3 useContext"),t(a)])]),n("li",null,[n("a",b,[s("React 官方文档-Context"),t(a)])])])])}const _=o(u,[["render",h],["__file","how-use-useContext-and-reason.html.vue"]]);export{_ as default};
